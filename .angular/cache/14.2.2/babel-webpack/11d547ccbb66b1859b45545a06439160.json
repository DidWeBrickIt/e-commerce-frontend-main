{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet nextId = 0; // Boilerplate for applying mixins to MatBadge.\n\n/** @docs-private */\n\nconst _MatBadgeBase = mixinDisabled(class {});\n\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\n\nclass MatBadge extends _MatBadgeBase {\n  constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n    super();\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._ariaDescriber = _ariaDescriber;\n    this._renderer = _renderer;\n    this._animationMode = _animationMode;\n    this._color = 'primary';\n    this._overlap = true;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n\n    this.position = 'above after';\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n\n    this.size = 'medium';\n    /** Unique id for the badge */\n\n    this._id = nextId++;\n    /** Whether the OnInit lifecycle hook has run yet */\n\n    this._isInitialized = false;\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const nativeElement = _elementRef.nativeElement;\n\n      if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n        throw Error('matBadge must be attached to an element node.');\n      }\n    }\n  }\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n\n\n  get color() {\n    return this._color;\n  }\n\n  set color(value) {\n    this._setColor(value);\n\n    this._color = value;\n  }\n  /** Whether the badge should overlap its contents or not */\n\n\n  get overlap() {\n    return this._overlap;\n  }\n\n  set overlap(val) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  /** The content for the badge */\n\n\n  get content() {\n    return this._content;\n  }\n\n  set content(newContent) {\n    this._updateRenderedContent(newContent);\n  }\n  /** Message used to describe the decorated element via aria-describedby */\n\n\n  get description() {\n    return this._description;\n  }\n\n  set description(newDescription) {\n    this._updateHostAriaDescription(newDescription);\n  }\n  /** Whether the badge is hidden. */\n\n\n  get hidden() {\n    return this._hidden;\n  }\n\n  set hidden(val) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  /** Whether the badge is above the host or not */\n\n\n  isAbove() {\n    return this.position.indexOf('below') === -1;\n  }\n  /** Whether the badge is after the host or not */\n\n\n  isAfter() {\n    return this.position.indexOf('before') === -1;\n  }\n  /**\n   * Gets the element into which the badge's content is being rendered. Undefined if the element\n   * hasn't been created (e.g. if the badge doesn't have content).\n   */\n\n\n  getBadgeElement() {\n    return this._badgeElement;\n  }\n\n  ngOnInit() {\n    // We may have server-side rendered badge that we need to clear.\n    // We need to do this in ngOnInit because the full content of the component\n    // on which the badge is attached won't necessarily be in the DOM until this point.\n    this._clearExistingBadges();\n\n    if (this.content && !this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n\n      this._updateRenderedContent(this.content);\n    }\n\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n    // We have to destroy it ourselves, otherwise it'll be retained in memory.\n    if (this._renderer.destroyNode) {\n      this._renderer.destroyNode(this._badgeElement);\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n  }\n  /** Creates the badge element */\n\n\n  _createBadgeElement() {\n    const badgeElement = this._renderer.createElement('span');\n\n    const activeClass = 'mat-badge-active';\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`); // The badge is aria-hidden because we don't want it to appear in the page's navigation\n    // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n\n    badgeElement.setAttribute('aria-hidden', 'true');\n    badgeElement.classList.add(BADGE_CONTENT_CLASS);\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement); // animate in after insertion\n\n\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n  /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n\n\n  _updateRenderedContent(newContent) {\n    const newContentNormalized = `${newContent ?? ''}`.trim(); // Don't create the badge element if the directive isn't initialized because we want to\n    // append the badge element to the *end* of the host element's content for backwards\n    // compatibility.\n\n    if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    }\n\n    if (this._badgeElement) {\n      this._badgeElement.textContent = newContentNormalized;\n    }\n\n    this._content = newContentNormalized;\n  }\n  /** Updates the host element's aria description via AriaDescriber. */\n\n\n  _updateHostAriaDescription(newDescription) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n\n    if (newDescription) {\n      this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n    }\n\n    this._description = newDescription;\n  }\n  /** Adds css theme class given the color to the component host */\n\n\n  _setColor(colorPalette) {\n    const classList = this._elementRef.nativeElement.classList;\n    classList.remove(`mat-badge-${this._color}`);\n\n    if (colorPalette) {\n      classList.add(`mat-badge-${colorPalette}`);\n    }\n  }\n  /** Clears any existing badges that might be left over from server-side rendering. */\n\n\n  _clearExistingBadges() {\n    // Only check direct children of this host element in order to avoid deleting\n    // any badges that might exist in descendant elements.\n    const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n\n    for (const badgeElement of Array.from(badges)) {\n      if (badgeElement !== this._badgeElement) {\n        badgeElement.remove();\n      }\n    }\n  }\n\n}\n\nMatBadge.ɵfac = function MatBadge_Factory(t) {\n  return new (t || MatBadge)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.AriaDescriber), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatBadge.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatBadge,\n  selectors: [[\"\", \"matBadge\", \"\"]],\n  hostAttrs: [1, \"mat-badge\"],\n  hostVars: 20,\n  hostBindings: function MatBadge_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx.content)(\"mat-badge-disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    disabled: [\"matBadgeDisabled\", \"disabled\"],\n    color: [\"matBadgeColor\", \"color\"],\n    overlap: [\"matBadgeOverlap\", \"overlap\"],\n    position: [\"matBadgePosition\", \"position\"],\n    content: [\"matBadge\", \"content\"],\n    description: [\"matBadgeDescription\", \"description\"],\n    size: [\"matBadgeSize\", \"size\"],\n    hidden: [\"matBadgeHidden\", \"hidden\"]\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatBadge, [{\n    type: Directive,\n    args: [{\n      selector: '[matBadge]',\n      inputs: ['disabled: matBadgeDisabled'],\n      host: {\n        'class': 'mat-badge',\n        '[class.mat-badge-overlap]': 'overlap',\n        '[class.mat-badge-above]': 'isAbove()',\n        '[class.mat-badge-below]': '!isAbove()',\n        '[class.mat-badge-before]': '!isAfter()',\n        '[class.mat-badge-after]': 'isAfter()',\n        '[class.mat-badge-small]': 'size === \"small\"',\n        '[class.mat-badge-medium]': 'size === \"medium\"',\n        '[class.mat-badge-large]': 'size === \"large\"',\n        '[class.mat-badge-hidden]': 'hidden || !content',\n        '[class.mat-badge-disabled]': 'disabled'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.AriaDescriber\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    color: [{\n      type: Input,\n      args: ['matBadgeColor']\n    }],\n    overlap: [{\n      type: Input,\n      args: ['matBadgeOverlap']\n    }],\n    position: [{\n      type: Input,\n      args: ['matBadgePosition']\n    }],\n    content: [{\n      type: Input,\n      args: ['matBadge']\n    }],\n    description: [{\n      type: Input,\n      args: ['matBadgeDescription']\n    }],\n    size: [{\n      type: Input,\n      args: ['matBadgeSize']\n    }],\n    hidden: [{\n      type: Input,\n      args: ['matBadgeHidden']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatBadgeModule {}\n\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) {\n  return new (t || MatBadgeModule)();\n};\n\nMatBadgeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatBadgeModule\n});\nMatBadgeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [A11yModule, MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatBadgeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, MatCommonModule],\n      exports: [MatBadge, MatCommonModule],\n      declarations: [MatBadge]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatBadge, MatBadgeModule };","map":{"version":3,"names":["i0","Directive","Optional","Inject","Input","NgModule","mixinDisabled","MatCommonModule","i1","A11yModule","coerceBooleanProperty","ANIMATION_MODULE_TYPE","nextId","_MatBadgeBase","BADGE_CONTENT_CLASS","MatBadge","constructor","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","_color","_overlap","position","size","_id","_isInitialized","ngDevMode","nativeElement","nodeType","ELEMENT_NODE","Error","color","value","_setColor","overlap","val","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateHostAriaDescription","hidden","_hidden","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","removeDescription","badgeElement","createElement","activeClass","setAttribute","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","describe","colorPalette","remove","badges","querySelectorAll","Array","from","ɵfac","NgZone","ElementRef","AriaDescriber","Renderer2","ɵdir","type","args","selector","inputs","host","undefined","decorators","MatBadgeModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/Users/joshu/Desktop/e-commerce-frontend-main/node_modules/@angular/material/fesm2020/badge.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {\n});\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() {\n        return this._overlap;\n    }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateHostAriaDescription(newDescription);\n    }\n    /** Whether the badge is hidden. */\n    get hidden() {\n        return this._hidden;\n    }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateHostAriaDescription(newDescription) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        if (newDescription) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        this._description = newDescription;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n}\nMatBadge.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatBadge.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatBadge, selector: \"[matBadge]\", inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\"] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    inputs: ['disabled: matBadgeDisabled'],\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; }, propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: ['matBadgeOverlap']\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: ['matBadgeHidden']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatBadgeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] });\nMatBadgeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}